chg_trad_vol = max(dat_3_aug_opt[[3]][[x]]$VAL_INLAKH - dat_2_aug_opt[[3]][[x]]$VAL_INLAKH)
})
install.packages('DescTools')
library(DescTools)
x = c(1:10)
Closest(x, 2)
Closest(x, 5)
Closest(x)
Closest(x, 1)
lapply(x, function(i) Closest(x = b, x = i))
lapply(x, function(i) Closest(a = b, x = i))
lapply(x, function(i) Closest(a = 2, x = i))
View(dat_put_top_5)
View(dat_opt)
View(dat_opt[[3]][[1]])
bottom_5
?top_n
cat
cat('anurag')
library(PerformanceAnalytics)
?ActivePremium
load()
library(devtools)
load_all()
library(sinew)
funds
f = funds
makeOxygen(f)
head(f)
makeOxyFile(f)
load_all()
check()
load_all()
returns.cal(funds$ret1, geometric = 'anurag')
returns.cal()
returns.cal
returns.cal(funds$ret1)
build()
library(devtools)
build()
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
dat = getSymbols('VIGIX', auto.assign = FALSE)
dat = getSymbols('VIGIX', auto.assign = FALSE)
dat = getSymbols('VIGIX', auto.assign = FALSE)
dat = getSymbols('VIGIX', auto.assign = FALSE)
library(quantmod)
library(PerformanceAnalytics)
dat_ret = CalculateReturns(dat$VIGIX.Adjusted)
chart.Histogram(dat_ret, methods= c('add.normal', 'add.density'), colorset = c('gray', 'red' 'blue'))
dat_ret = CalculateReturns(dat$VIGIX.Adjusted)
chart.Histogram(dat_ret, methods= c('add.normal', 'add.density'), colorset = c('gray', 'red', 'blue'))
table.Stats(dat_ret)
SharpeRatio(dat_ret)
SortinoRatio(dat_ret)
Return.annualized(dat_ret)
plot.xts(dat_ret)
dat_ret = CalculateReturns(dat$VIGIX.Adjusted)
chart.Histogram(dat_ret, methods= c('add.normal', 'add.density'), colorset = c('gray', 'red', 'blue'))
table.Stats(dat_ret)
dat = getSymbols('VIGIX', auto.assign = FALSE)
ben = getSymbols('^GPSC', ,auto.assign = FALSE)
dat = getSymbols('VIGIX', auto.assign = FALSE)
ben = getSymbols('^GPSC', auto.assign = FALSE)
dat = getSymbols('VIGIX', auto.assign = FALSE)
ben = getSymbols('^GSPC', auto.assign = FALSE)
library(cranlogs)
cran_downloads('roptions')
library(shiny)
ui = fluidPage(
sidebarLayout(
sidebarPanel(
actionLink(inputId = 'roptions', label = 'roptions'),
actionLink(inputId = 'rportfolio',  label = 'rportfolio')),
mainPanel(textOutput(outputId = 'roptions'))
)
)
server = function(input, output){
output$roptions = renderText({input$roptions})
}
shinyApp(ui = ui, server = server)
?renderImage
runApp('C:/Users/DELL/Desktop/Anurag/shiny/shiny.R')
runApp('C:/Users/DELL/Desktop/Anurag/shiny/shiny.R')
runApp('C:/Users/DELL/Desktop/Anurag/shiny/shiny.R')
runApp('C:/Users/DELL/Desktop/Anurag/shiny/shiny.R')
runApp('C:/Users/DELL/Desktop/Anurag/shiny/shiny.R')
runApp('shiny.R')
runApp('C:/Users/DELL/Desktop/Anurag/shiny/shiny.R')
runApp('C:/Users/DELL/Desktop/Anurag/shiny/shiny.R')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp()
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
runApp()
runApp('C:/Users/DELL/Desktop/Anurag/shiny')
library(astsas)
library(astsa)
arima.sim(model = list(c(0, 0, 1), ma = 1), n = 10)
sarima(xdata = sample(10), p = 0, d = 0, q = 1)
acf(sample(10))
pacf(sample(10))
acf2(sample(10))
holt(sample(10))
library(forecast)
holt(sample(10))
ses(sample(10))
checkresiduals(sample(10))
library(purrr)
map(.x = list(1:10), .f = safely(sum, otherwise = NA_real_))
map2(.x = list(1:10), .y = list(1:10), sum)
list_all = list(means = list(1:10), sds = list(1:10), ns = list(1:10))
list_all
pmap(list_all, function(ns, sds, means){rnorm(n = ns, mean = means, sd = sds)})
map_if(.x = list(1:10), .p = is.character, .f = sum)
c1 = compose(mean, sum)
p1 = partial(mean, na.rm = TRUE)
map(.x = list(1:10), c1)
map(.x = list(1:10), p1)
gdp = data.frame(year = 1000:2005, gdp = c(10, 12, 13, 19, 22, 28))
gdp = data.frame(year = 2000:2005, gdp = c(10, 12, 13, 19, 22, 28))
gdp
gdp %>%
split(.$year) %>%
accumulate(~bind_rows(.x, .y)) %>%
set_names(2000:2005) %>%
bind_rows(.id = 'frame')
library(tidyverse)
gdp %>%
split(.$year) %>%
accumulate(~bind_rows(.x, .y)) %>%
set_names(2000:2005) %>%
bind_rows(.id = 'frame')
library(plotly)
library(plotly)
plot_ly(gdp, x = ~year, y = ~gdp, hoverinfo = 'text', text = ~paste('year', year, 'gdp', gdp)) %>%
add_lines(color = I('red'), marker = list(opacity = 0.5)) %>%
layout(xaxis = list(title = 'xaxis'), yaxis = list(title = 'yaxis'), title = list('gdp') %>%
add_lines()
)
gdp = gdp %>%
split(.$year) %>%
accumulate(~bind_rows(.x, .y)) %>%
set_names(2000:2005) %>%
bind_rows(.id = 'frame')
plot_ly(gdp, x = ~year, y = ~gdp, hoverinfo = 'text', text = ~paste('year', year, 'gdp', gdp)) %>%
add_lines(color = I('red'), marker = list(opacity = 0.5)) %>%
layout(xaxis = list(title = 'xaxis'), yaxis = list(title = 'yaxis'), title = list('gdp')
)
plot_ly(gdp, x = ~year, y = ~gdp, frame = ~frame, color = ~gdp) %>%
add_lines(size = ~gdp, marker = list(opacity = 0.5)) %>%
layout(xaxis = list(title = 'xaxis'), yaxis = list(title = 'yaxis'), title = 'gdp') %>%
animation_button(label = 'click') %>%
animation_slider(hide = TRUE) %>%
animation_opts(redraw = TRUE)
subplot()
window()
ggAcf(wn)
library(cranlogs)
cran_downloads('roptions')
library(cranlogs)
cran_downloads('roptions')
d1 = cran_downloads('roptions', 'last-month')
sum(d1$count
)
cran_downloads('rugarch')
cran_downloads('roptions')
library(cranlogs)
cran_downloads('roptions')
library(cranlogs)
cran_downloads('roptions')
d1 = cran_downloads('roptions', 'last-month')
sum(d1$count)
library(tidyverse)
dnorm()
dnorm(sample(10))
plot(dnorm(sample(10)))
ggplot(data = iris, aes(x= Sepal.Lenth, y = Sepal.Width)) +
geom_bar() +
stat_summary(fun.data = mean)
ggplot(data = iris, aes(x= Sepal.Length, y = Sepal.Width)) +
geom_bar() +
stat_summary(fun.data = mean)
ggplot(data = iris, aes(x= Sepal.Length, y = Sepal.Width)) +
geom_bar() +
stat_summary(fun = mean)
mean_sdl()
mean_sdl(sample(10))
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, group = Species)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, group = Species)) +
geom_point() +
stat_smooth(method = 'lm', se = FALSE)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, group = Species, color = Species)) +
geom_point() +
stat_smooth(method = 'lm', se = FALSE)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, group = Species, color = Species)) +
geom_point() +
stat_summary()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, group = Species, color = Species)) +
geom_point() +
stat_summary(fun.data = sd)
quantile(iris$Petal.Width, 1)
quantile(iris$Petal.Width)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, group = Species, color = Species)) +
geom_point() +
stat_summary(geom = 'linrange', fun.data = sd)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, group = Species, color = Species)) +
geom_point() +
stat_summary(geom = 'linerange', fun.data = sd)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, group = Species, color = Species)) +
geom_point() +
stat_summary(geom = 'linerange', fun.data = sd)
?stat_summary
library(quantmod)
aapl= getSymbols('AAPL', auto.assign = FALSE)
library(PerformanceAnalytics)
ret = CalculateReturns(aapl$AAPL.Adjusted)
ret
ret_df = as.data.frame(ret)
head(reret_df)
head(ret_df)
colnames(ret_df) = c('date', 'ret')
colnames(ret_df)
class(ret_df)
ggplot(data = ret_df, aes(y = AAPL.Adjusted)) +
geom_histogram() +
stat_summary(fun.data = dnorm, fun.args = list(mean = mean(ret_df$AAPL.Adjusted), sd = sd(ret_df$AAPL.Adjusted)))
source('~/.active-rstudio-document', echo=TRUE)
ret_df = ret_df[-1,]
ret_df = ret_df[-1,]
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..)) +
stat_summary(fun.data = dnorm, fun.args = list(mean = mean(ret_df$AAPL.Adjusted), sd = sd(ret_df$AAPL.Adjusted)))
head(ret_df)
ret_df = as.data.frame(ret[-1,])
head(ret_df)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..)) +
stat_summary(fun.data = dnorm, fun.args = list(mean = mean(ret_df$AAPL.Adjusted), sd = sd(ret_df$AAPL.Adjusted)))
ggplot(data = ret_df, aes(y = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..))
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..))
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 100)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 50)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density.. , binwidth = 50))
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..) binwidth = 50)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 50)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 30)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), bin = 30)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..)) +
stat_summary(fun.data = dnorm, fun.args = list(mean = mean(ret_df$AAPL.Adjusted), sd = sd(ret_df$AAPL.Adjusted)))
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..)) +
stat_summary(fun = dnorm, color = 'red', fun.args = list(mean = mean(ret_df$AAPL.Adjusted), sd = sd(ret_df$AAPL.Adjusted)))
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..)) +
stat_summary(fun = dnorm, color = 'red', fun.args = list(mean = mean(ret_df$AAPL.Adjusted), sd = sd(ret_df$AAPL.Adjusted)))
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_bar(aes(y = ..density..))
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..))
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 50)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 10)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 0.00001)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 0.001)
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 0.001) +
stat_summary(fun.data = dnorm, color = 'red')
ggplot(data = ret_df, aes(x = AAPL.Adjusted)) +
geom_histogram(aes(y = ..density..), binwidth = 0.001) +
stat_summary(fun.data = mean, color = 'red')
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_bar(
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_bar()
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_bar()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
stat_summary(fun.data = mean, color = 'red')
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
stat_summary(fun.data = mean, geom = 'errorbar')
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
stat_summary(fun = mean, geom = 'errorbar')
ggplot(data = iris, aes(y = Sepal.Width)) +
geom_bar()
ggplot(data = iris, aes(y = Sepal.Width)) +
geom_bar() +
coord_flip()
ggplot(data = iris, aes(y = Sepal.Width)) +
geom_bar() +
coord_flip() +
stat_summary(fun = mean, geom = 'errorbar')
ggplot(data = iris, aes(y = Sepal.Width)) +
geom_bar() +
coord_flip() +
stat_summary(fun = mean)
ggplot(data = iris, aes(y = Sepal.Width)) +
geom_bar() +
coord_flip() +
stat_summary()
ggplot(data = iris, aes(y = Sepal.Width)) +
geom_bar() +
coord_flip() +
stat_summary()
ggplot(data = iris, aes(y = Sepal.Width)) +
geom_bar() +
coord_flip() +
geom_errorbar()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
coord_flip() +
geom_errorbar()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
coord_flip() +
stat_summary()
mean_se(iris$Petal.Width)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
coord_flip() +
stat_summary(geom = 'errorbar')
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
coord_line() +
stat_summary(geom = 'errorbar')
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
coord_flip() +
stat_summary(geom = 'errorbar')
coord_polar()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_line() +
coord_polar()
ggplot(data = iris, aes(y = Sepal.Width)) +
geom_histogram() +
coord_polar()
ggplot(data = iris, aes(y = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width)) +
geom_histogram() +
coord_polar(theta = 'y')
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
facet_grid(. ~ Species)
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
facet_wrap(. ~ Species)
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
coord_fixed(0.5)
facet_wrap(. ~ Species)
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
scale_x_continuous(limits = c(3.5, 7), expand = c(0,0))
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
scale_x_continuous(limits = c(3.5, 7), expand = c(0,0))
ggplot(data = iris, aes(y = Sepal.Length)) +
geom_bar() +
scale_x_discrete(Species)
ggplot(data = iris, aes(y = Sepal.Length)) +
geom_bar() +
scale_x_discrete('Species')
ggplot(data = iris, aes(y = Sepal.Length)) +
geom_bar() +
scale_x_discrete('Species') +
coord_flip()
ggplot(data = iris, aes(y = Sepal.Length)) +
stat_summary(fun.y = ..density..)
ggplot(data = iris, aes(y = Sepal.Length)) +
stat_summary(fun = ..density..)
ggplot(data = iris, aes(y = Sepal.Length)) +
stat_summary(fun = bar)
ggplot(data = iris, aes(y = Sepal.Length)) +
stat_summary(fun = mean)
ggplot(data = iris, aes(x = Sepal.Width,y = Sepal.Length)) +
stat_summary(fun = mean)
ggplot(data = iris, aes(x = Sepal.Width,y = Sepal.Length)) +
stat_summary(fun = mean) +
coord_fixed(0.5)
ggplot(data = iris, aes(x = Sepal.Width,y = Sepal.Length)) +
stat_summary(fun = mean) +
coord_equal()
library(class)
d1 = dist(iris[,-5])
h1 = hclust(iris[,-5])
h1 = hclust(d1)
c1 = cutree(h1, k = 3)
c1
scale(d1)
library(broom)
rbinom(1, 2, 0.5)
rbinom(10, 2, 0.5)
r1 = rbinom(1000, 1, 0.5)
r1 = data.frame(n = r1)
ggplot(data = r1, aes(x = n)) +
geom_histogram(aes(y = ..density..))
r1 %>%
ggplot(aes(y = n)) +
geom_bar()
library(caret)
train(Species ~ ., data = iris, method = 'glm')
train(Species ~ ., data = iris, method = 'lm')
train(Species ~., data = iris, method = 'ranger')
?trainControl
?preProcess
perc = function(x, y) UseMethod('perc')
perc
perc.character(x, y) print('use number')
perc.character = function(x, y) print('use number')
perc.numeric = function(x, y) (x/y) * 100
perc(10, 100)
perc('a', 10)
library(parallel)
library(future)
cl = makeCluster(spec = 1)
clusterApply(cl = cl, x = 1:10, fun = sum)
library(doParallel)
library(doFuture)
registerDoParallel(cl = cl, cores = 2)
foreach(x = list(1:10), combine = '+') %dopar% sum(x)
registerDoFuture()
plan(strategy = 'multicore')
library(resample)
library(dummies)
prcomp(iris[,-5], scale = TRUE, center = FALSE)
